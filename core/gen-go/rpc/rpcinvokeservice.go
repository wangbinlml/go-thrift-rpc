// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rpc

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type RPCInvokeService interface {
	// Parameters:
	//  - ServiceName
	//  - MethodName
	//  - Msg
	Invoke(serviceName string, methodName string, msg *Msg) (r *Msg, err error)
}

type RPCInvokeServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewRPCInvokeServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RPCInvokeServiceClient {
	return &RPCInvokeServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewRPCInvokeServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RPCInvokeServiceClient {
	return &RPCInvokeServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - ServiceName
//  - MethodName
//  - Msg
func (p *RPCInvokeServiceClient) Invoke(serviceName string, methodName string, msg *Msg) (r *Msg, err error) {
	if err = p.sendInvoke(serviceName, methodName, msg); err != nil {
		return
	}
	return p.recvInvoke()
}

func (p *RPCInvokeServiceClient) sendInvoke(serviceName string, methodName string, msg *Msg) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("invoke", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RPCInvokeServiceInvokeArgs{
		ServiceName: serviceName,
		MethodName:  methodName,
		Msg:         msg,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *RPCInvokeServiceClient) recvInvoke() (value *Msg, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "invoke" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "invoke failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "invoke failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "invoke failed: invalid message type")
		return
	}
	result := RPCInvokeServiceInvokeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.InvalidReq != nil {
		err = result.InvalidReq
		return
	} else if result.TimeOut != nil {
		err = result.TimeOut
		return
	}
	value = result.GetSuccess()
	return
}

type RPCInvokeServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      RPCInvokeService
}

func (p *RPCInvokeServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *RPCInvokeServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *RPCInvokeServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewRPCInvokeServiceProcessor(handler RPCInvokeService) *RPCInvokeServiceProcessor {

	self2 := &RPCInvokeServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self2.processorMap["invoke"] = &rPCInvokeServiceProcessorInvoke{handler: handler}
	return self2
}

func (p *RPCInvokeServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x3.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x3

}

type rPCInvokeServiceProcessorInvoke struct {
	handler RPCInvokeService
}

func (p *rPCInvokeServiceProcessorInvoke) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RPCInvokeServiceInvokeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("invoke", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RPCInvokeServiceInvokeResult{}
	var retval *Msg
	var err2 error
	if retval, err2 = p.handler.Invoke(args.ServiceName, args.MethodName, args.Msg); err2 != nil {
		switch v := err2.(type) {
		case *InvalidRequestException:
			result.InvalidReq = v
		case *TimedOutException:
			result.TimeOut = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing invoke: "+err2.Error())
			oprot.WriteMessageBegin("invoke", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("invoke", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ServiceName
//  - MethodName
//  - Msg
type RPCInvokeServiceInvokeArgs struct {
	ServiceName string `thrift:"serviceName,1,required" json:"serviceName"`
	MethodName  string `thrift:"methodName,2,required" json:"methodName"`
	Msg         *Msg   `thrift:"msg,3,required" json:"msg"`
}

func NewRPCInvokeServiceInvokeArgs() *RPCInvokeServiceInvokeArgs {
	return &RPCInvokeServiceInvokeArgs{}
}

func (p *RPCInvokeServiceInvokeArgs) GetServiceName() string {
	return p.ServiceName
}

func (p *RPCInvokeServiceInvokeArgs) GetMethodName() string {
	return p.MethodName
}

var RPCInvokeServiceInvokeArgs_Msg_DEFAULT *Msg

func (p *RPCInvokeServiceInvokeArgs) GetMsg() *Msg {
	if !p.IsSetMsg() {
		return RPCInvokeServiceInvokeArgs_Msg_DEFAULT
	}
	return p.Msg
}
func (p *RPCInvokeServiceInvokeArgs) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *RPCInvokeServiceInvokeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetServiceName bool = false
	var issetMethodName bool = false
	var issetMsg bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetServiceName = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetMethodName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetMsg = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetServiceName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceName is not set"))
	}
	if !issetMethodName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MethodName is not set"))
	}
	if !issetMsg {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Msg is not set"))
	}
	return nil
}

func (p *RPCInvokeServiceInvokeArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ServiceName = v
	}
	return nil
}

func (p *RPCInvokeServiceInvokeArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.MethodName = v
	}
	return nil
}

func (p *RPCInvokeServiceInvokeArgs) readField3(iprot thrift.TProtocol) error {
	p.Msg = &Msg{}
	if err := p.Msg.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Msg), err)
	}
	return nil
}

func (p *RPCInvokeServiceInvokeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("invoke_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RPCInvokeServiceInvokeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serviceName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ServiceName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serviceName (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serviceName: ", p), err)
	}
	return err
}

func (p *RPCInvokeServiceInvokeArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("methodName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:methodName: ", p), err)
	}
	if err := oprot.WriteString(string(p.MethodName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.methodName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:methodName: ", p), err)
	}
	return err
}

func (p *RPCInvokeServiceInvokeArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:msg: ", p), err)
	}
	if err := p.Msg.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Msg), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:msg: ", p), err)
	}
	return err
}

func (p *RPCInvokeServiceInvokeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RPCInvokeServiceInvokeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - InvalidReq
//  - TimeOut
type RPCInvokeServiceInvokeResult struct {
	Success    *Msg                     `thrift:"success,0" json:"success,omitempty"`
	InvalidReq *InvalidRequestException `thrift:"invalidReq,1" json:"invalidReq,omitempty"`
	TimeOut    *TimedOutException       `thrift:"timeOut,2" json:"timeOut,omitempty"`
}

func NewRPCInvokeServiceInvokeResult() *RPCInvokeServiceInvokeResult {
	return &RPCInvokeServiceInvokeResult{}
}

var RPCInvokeServiceInvokeResult_Success_DEFAULT *Msg

func (p *RPCInvokeServiceInvokeResult) GetSuccess() *Msg {
	if !p.IsSetSuccess() {
		return RPCInvokeServiceInvokeResult_Success_DEFAULT
	}
	return p.Success
}

var RPCInvokeServiceInvokeResult_InvalidReq_DEFAULT *InvalidRequestException

func (p *RPCInvokeServiceInvokeResult) GetInvalidReq() *InvalidRequestException {
	if !p.IsSetInvalidReq() {
		return RPCInvokeServiceInvokeResult_InvalidReq_DEFAULT
	}
	return p.InvalidReq
}

var RPCInvokeServiceInvokeResult_TimeOut_DEFAULT *TimedOutException

func (p *RPCInvokeServiceInvokeResult) GetTimeOut() *TimedOutException {
	if !p.IsSetTimeOut() {
		return RPCInvokeServiceInvokeResult_TimeOut_DEFAULT
	}
	return p.TimeOut
}
func (p *RPCInvokeServiceInvokeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RPCInvokeServiceInvokeResult) IsSetInvalidReq() bool {
	return p.InvalidReq != nil
}

func (p *RPCInvokeServiceInvokeResult) IsSetTimeOut() bool {
	return p.TimeOut != nil
}

func (p *RPCInvokeServiceInvokeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RPCInvokeServiceInvokeResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Msg{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *RPCInvokeServiceInvokeResult) readField1(iprot thrift.TProtocol) error {
	p.InvalidReq = &InvalidRequestException{}
	if err := p.InvalidReq.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InvalidReq), err)
	}
	return nil
}

func (p *RPCInvokeServiceInvokeResult) readField2(iprot thrift.TProtocol) error {
	p.TimeOut = &TimedOutException{}
	if err := p.TimeOut.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TimeOut), err)
	}
	return nil
}

func (p *RPCInvokeServiceInvokeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("invoke_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RPCInvokeServiceInvokeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *RPCInvokeServiceInvokeResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvalidReq() {
		if err := oprot.WriteFieldBegin("invalidReq", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:invalidReq: ", p), err)
		}
		if err := p.InvalidReq.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InvalidReq), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:invalidReq: ", p), err)
		}
	}
	return err
}

func (p *RPCInvokeServiceInvokeResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeOut() {
		if err := oprot.WriteFieldBegin("timeOut", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timeOut: ", p), err)
		}
		if err := p.TimeOut.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TimeOut), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timeOut: ", p), err)
		}
	}
	return err
}

func (p *RPCInvokeServiceInvokeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RPCInvokeServiceInvokeResult(%+v)", *p)
}
